/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * LogApi - axios parameter creator
 * @export
 */
export const LogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {string} accountId Log identifier
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdlogsGetCollection: async (accountId: string, page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('accountsAccountIdlogsGetCollection', 'accountId', accountId)
            const localVarPath = `/api/accounts/{account_id}/logs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsGetCollection: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {string} accountId Log identifier
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsAccountIdlogsGetCollection(accountId: string, page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdlogsGetCollection(accountId, page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.accountsAccountIdlogsGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsGetCollection(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsGetCollection(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.logsGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogApi - factory interface
 * @export
 */
export const LogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {LogApiAccountsAccountIdlogsGetCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsAccountIdlogsGetCollection(requestParameters: LogApiAccountsAccountIdlogsGetCollectionRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.accountsAccountIdlogsGetCollection(requestParameters.accountId, requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {LogApiLogsGetCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsGetCollection(requestParameters: LogApiLogsGetCollectionRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.logsGetCollection(requestParameters.page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for accountsAccountIdlogsGetCollection operation in LogApi.
 * @export
 * @interface LogApiAccountsAccountIdlogsGetCollectionRequest
 */
export interface LogApiAccountsAccountIdlogsGetCollectionRequest {
    /**
     * Log identifier
     * @type {string}
     * @memberof LogApiAccountsAccountIdlogsGetCollection
     */
    readonly accountId: string

    /**
     * The collection page number
     * @type {number}
     * @memberof LogApiAccountsAccountIdlogsGetCollection
     */
    readonly page?: number
}

/**
 * Request parameters for logsGetCollection operation in LogApi.
 * @export
 * @interface LogApiLogsGetCollectionRequest
 */
export interface LogApiLogsGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof LogApiLogsGetCollection
     */
    readonly page?: number
}

/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export class LogApi extends BaseAPI {
    /**
     * Retrieves the collection of Log resources.
     * @summary Retrieves the collection of Log resources.
     * @param {LogApiAccountsAccountIdlogsGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public accountsAccountIdlogsGetCollection(requestParameters: LogApiAccountsAccountIdlogsGetCollectionRequest, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).accountsAccountIdlogsGetCollection(requestParameters.accountId, requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Log resources.
     * @summary Retrieves the collection of Log resources.
     * @param {LogApiLogsGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logsGetCollection(requestParameters: LogApiLogsGetCollectionRequest = {}, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).logsGetCollection(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }
}

