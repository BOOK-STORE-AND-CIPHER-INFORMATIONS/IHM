/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * BookApi - axios parameter creator
 * @export
 */
export const BookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGetCollection: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdDelete', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdGet', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
         * @param {string} id Book identifier
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPatch: async (id: string, body?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdPatch', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Book resource.
         * @summary Replaces the Book resource.
         * @param {string} id Book identifier
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPut: async (id: string, body?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdPut', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost: async (body?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookApi - functional programming interface
 * @export
 */
export const BookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksGetCollection(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksGetCollection(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
         * @param {string} id Book identifier
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdPatch(id: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdPatch(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Replaces the Book resource.
         * @summary Replaces the Book resource.
         * @param {string} id Book identifier
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdPut(id: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdPut(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookApi - factory interface
 * @export
 */
export const BookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {BookApiBooksGetCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGetCollection(requestParameters: BookApiBooksGetCollectionRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.booksGetCollection(requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {BookApiBooksIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdDelete(requestParameters: BookApiBooksIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.booksIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {BookApiBooksIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdGet(requestParameters: BookApiBooksIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.booksIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
         * @param {BookApiBooksIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPatch(requestParameters: BookApiBooksIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.booksIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces the Book resource.
         * @summary Replaces the Book resource.
         * @param {BookApiBooksIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPut(requestParameters: BookApiBooksIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.booksIdPut(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
         * @param {BookApiBooksPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost(requestParameters: BookApiBooksPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.booksPost(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for booksGetCollection operation in BookApi.
 * @export
 * @interface BookApiBooksGetCollectionRequest
 */
export interface BookApiBooksGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof BookApiBooksGetCollection
     */
    readonly page?: number
}

/**
 * Request parameters for booksIdDelete operation in BookApi.
 * @export
 * @interface BookApiBooksIdDeleteRequest
 */
export interface BookApiBooksIdDeleteRequest {
    /**
     * Book identifier
     * @type {string}
     * @memberof BookApiBooksIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for booksIdGet operation in BookApi.
 * @export
 * @interface BookApiBooksIdGetRequest
 */
export interface BookApiBooksIdGetRequest {
    /**
     * Book identifier
     * @type {string}
     * @memberof BookApiBooksIdGet
     */
    readonly id: string
}

/**
 * Request parameters for booksIdPatch operation in BookApi.
 * @export
 * @interface BookApiBooksIdPatchRequest
 */
export interface BookApiBooksIdPatchRequest {
    /**
     * Book identifier
     * @type {string}
     * @memberof BookApiBooksIdPatch
     */
    readonly id: string

    /**
     * Encrypted request payload (base64 encoded)
     * @type {any}
     * @memberof BookApiBooksIdPatch
     */
    readonly body?: any
}

/**
 * Request parameters for booksIdPut operation in BookApi.
 * @export
 * @interface BookApiBooksIdPutRequest
 */
export interface BookApiBooksIdPutRequest {
    /**
     * Book identifier
     * @type {string}
     * @memberof BookApiBooksIdPut
     */
    readonly id: string

    /**
     * Encrypted request payload (base64 encoded)
     * @type {any}
     * @memberof BookApiBooksIdPut
     */
    readonly body?: any
}

/**
 * Request parameters for booksPost operation in BookApi.
 * @export
 * @interface BookApiBooksPostRequest
 */
export interface BookApiBooksPostRequest {
    /**
     * Encrypted request payload (base64 encoded)
     * @type {any}
     * @memberof BookApiBooksPost
     */
    readonly body?: any
}

/**
 * BookApi - object-oriented interface
 * @export
 * @class BookApi
 * @extends {BaseAPI}
 */
export class BookApi extends BaseAPI {
    /**
     * Retrieves the collection of Book resources.
     * @summary Retrieves the collection of Book resources.
     * @param {BookApiBooksGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksGetCollection(requestParameters: BookApiBooksGetCollectionRequest = {}, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksGetCollection(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Book resource.
     * @summary Removes the Book resource.
     * @param {BookApiBooksIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdDelete(requestParameters: BookApiBooksIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Book resource.
     * @summary Retrieves a Book resource.
     * @param {BookApiBooksIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdGet(requestParameters: BookApiBooksIdGetRequest, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Book resource.
     * @summary Updates the Book resource.
     * @param {BookApiBooksIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdPatch(requestParameters: BookApiBooksIdPatchRequest, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Book resource.
     * @summary Replaces the Book resource.
     * @param {BookApiBooksIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdPut(requestParameters: BookApiBooksIdPutRequest, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdPut(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Book resource.
     * @summary Creates a Book resource.
     * @param {BookApiBooksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksPost(requestParameters: BookApiBooksPostRequest = {}, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

