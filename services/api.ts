/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'ipAddress': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Account
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Account
     */
    'logs'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'userIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface AccountJsonld
 */
export interface AccountJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof AccountJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'ipAddress': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountJsonld
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountJsonld
     */
    'logs'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'userIdentifier'?: string;
}
/**
 * @type AccountJsonldContext
 * @export
 */
export type AccountJsonldContext = AccountJsonldContextOneOf | string;

/**
 * 
 * @export
 * @interface AccountJsonldContextOneOf
 */
export interface AccountJsonldContextOneOf {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof AccountJsonldContextOneOf
     */
    '@vocab': string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonldContextOneOf
     */
    'hydra': AccountJsonldContextOneOfHydraEnum;
}

export const AccountJsonldContextOneOfHydraEnum = {
    HttpWwwW3OrgNsHydraCore: 'http://www.w3.org/ns/hydra/core#'
} as const;

export type AccountJsonldContextOneOfHydraEnum = typeof AccountJsonldContextOneOfHydraEnum[keyof typeof AccountJsonldContextOneOfHydraEnum];

/**
 * 
 * @export
 * @interface ApiAccountsGetCollection200Response
 */
export interface ApiAccountsGetCollection200Response {
    /**
     * 
     * @type {Array<AccountJsonld>}
     * @memberof ApiAccountsGetCollection200Response
     */
    'member': Array<AccountJsonld>;
    /**
     * 
     * @type {number}
     * @memberof ApiAccountsGetCollection200Response
     */
    'totalItems'?: number;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseView}
     * @memberof ApiAccountsGetCollection200Response
     */
    'view'?: ApiAccountsGetCollection200ResponseView;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseSearch}
     * @memberof ApiAccountsGetCollection200Response
     */
    'search'?: ApiAccountsGetCollection200ResponseSearch;
}
/**
 * 
 * @export
 * @interface ApiAccountsGetCollection200ResponseSearch
 */
export interface ApiAccountsGetCollection200ResponseSearch {
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseSearch
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseSearch
     */
    'template'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseSearch
     */
    'variableRepresentation'?: string;
    /**
     * 
     * @type {Array<ApiAccountsGetCollection200ResponseSearchMappingInner>}
     * @memberof ApiAccountsGetCollection200ResponseSearch
     */
    'mapping'?: Array<ApiAccountsGetCollection200ResponseSearchMappingInner>;
}
/**
 * 
 * @export
 * @interface ApiAccountsGetCollection200ResponseSearchMappingInner
 */
export interface ApiAccountsGetCollection200ResponseSearchMappingInner {
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseSearchMappingInner
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseSearchMappingInner
     */
    'variable'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseSearchMappingInner
     */
    'property'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ApiAccountsGetCollection200ResponseSearchMappingInner
     */
    'required'?: boolean;
}
/**
 * 
 * @export
 * @interface ApiAccountsGetCollection200ResponseView
 */
export interface ApiAccountsGetCollection200ResponseView {
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseView
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseView
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseView
     */
    'first'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseView
     */
    'last'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseView
     */
    'previous'?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiAccountsGetCollection200ResponseView
     */
    'next'?: string;
}
/**
 * 
 * @export
 * @interface ApiBooksGetCollection200Response
 */
export interface ApiBooksGetCollection200Response {
    /**
     * 
     * @type {Array<BookJsonld>}
     * @memberof ApiBooksGetCollection200Response
     */
    'member': Array<BookJsonld>;
    /**
     * 
     * @type {number}
     * @memberof ApiBooksGetCollection200Response
     */
    'totalItems'?: number;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseView}
     * @memberof ApiBooksGetCollection200Response
     */
    'view'?: ApiAccountsGetCollection200ResponseView;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseSearch}
     * @memberof ApiBooksGetCollection200Response
     */
    'search'?: ApiAccountsGetCollection200ResponseSearch;
}
/**
 * 
 * @export
 * @interface ApiLogsGetCollection200Response
 */
export interface ApiLogsGetCollection200Response {
    /**
     * 
     * @type {Array<LogJsonld>}
     * @memberof ApiLogsGetCollection200Response
     */
    'member': Array<LogJsonld>;
    /**
     * 
     * @type {number}
     * @memberof ApiLogsGetCollection200Response
     */
    'totalItems'?: number;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseView}
     * @memberof ApiLogsGetCollection200Response
     */
    'view'?: ApiAccountsGetCollection200ResponseView;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseSearch}
     * @memberof ApiLogsGetCollection200Response
     */
    'search'?: ApiAccountsGetCollection200ResponseSearch;
}
/**
 * 
 * @export
 * @interface ApiRentsGetCollection200Response
 */
export interface ApiRentsGetCollection200Response {
    /**
     * 
     * @type {Array<RentJsonld>}
     * @memberof ApiRentsGetCollection200Response
     */
    'member': Array<RentJsonld>;
    /**
     * 
     * @type {number}
     * @memberof ApiRentsGetCollection200Response
     */
    'totalItems'?: number;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseView}
     * @memberof ApiRentsGetCollection200Response
     */
    'view'?: ApiAccountsGetCollection200ResponseView;
    /**
     * 
     * @type {ApiAccountsGetCollection200ResponseSearch}
     * @memberof ApiRentsGetCollection200Response
     */
    'search'?: ApiAccountsGetCollection200ResponseSearch;
}
/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    'stock': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Book
     */
    'rents'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BookJsonld
 */
export interface BookJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof BookJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof BookJsonld
     */
    'stock': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookJsonld
     */
    'rents'?: Array<string>;
}
/**
 * 
 * @export
 * @interface CommunicationPublicKeyOutputJsonld
 */
export interface CommunicationPublicKeyOutputJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof CommunicationPublicKeyOutputJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof CommunicationPublicKeyOutputJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunicationPublicKeyOutputJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunicationPublicKeyOutputJsonld
     */
    'publicKey'?: string | null;
}
/**
 * Unprocessable entity
 * @export
 * @interface ConstraintViolationJson
 */
export interface ConstraintViolationJson {
    /**
     * 
     * @type {number}
     * @memberof ConstraintViolationJson
     */
    'status'?: number;
    /**
     * 
     * @type {Array<ConstraintViolationJsonViolationsInner>}
     * @memberof ConstraintViolationJson
     */
    'violations'?: Array<ConstraintViolationJsonViolationsInner>;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface ConstraintViolationJsonViolationsInner
 */
export interface ConstraintViolationJsonViolationsInner {
    /**
     * The property path of the violation
     * @type {string}
     * @memberof ConstraintViolationJsonViolationsInner
     */
    'propertyPath'?: string;
    /**
     * The message associated with the violation
     * @type {string}
     * @memberof ConstraintViolationJsonViolationsInner
     */
    'message'?: string;
}
/**
 * Unprocessable entity
 * @export
 * @interface ConstraintViolationJsonldJsonld
 */
export interface ConstraintViolationJsonldJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof ConstraintViolationJsonldJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'status'?: number;
    /**
     * 
     * @type {Array<ConstraintViolationJsonViolationsInner>}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'violations'?: Array<ConstraintViolationJsonViolationsInner>;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'instance'?: string | null;
}
/**
 * A representation of common errors.
 * @export
 * @interface ErrorJsonld
 */
export interface ErrorJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof ErrorJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof ErrorJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorJsonld
     */
    '@type'?: string;
    /**
     * A short, human-readable summary of the problem.
     * @type {string}
     * @memberof ErrorJsonld
     */
    'title'?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ErrorJsonld
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorJsonld
     */
    'status'?: number;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ErrorJsonld
     */
    'instance'?: string | null;
    /**
     * A URI reference that identifies the problem type
     * @type {string}
     * @memberof ErrorJsonld
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorJsonld
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface Log
 */
export interface Log {
    /**
     * 
     * @type {string}
     * @memberof Log
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Log
     */
    'account': string | null;
    /**
     * 
     * @type {string}
     * @memberof Log
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Log
     */
    'type': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Log
     */
    'data'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface LogJsonld
 */
export interface LogJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof LogJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'account': string | null;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'type': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof LogJsonld
     */
    'data'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface LoginCheckPost200Response
 */
export interface LoginCheckPost200Response {
    /**
     * 
     * @type {string}
     * @memberof LoginCheckPost200Response
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface LoginCheckPostRequest
 */
export interface LoginCheckPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginCheckPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginCheckPostRequest
     */
    'password': string;
}
/**
 * A representation of common errors.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A short, human-readable summary of the problem.
     * @type {string}
     * @memberof ModelError
     */
    'title'?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'status'?: number;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ModelError
     */
    'instance'?: string | null;
    /**
     * A URI reference that identifies the problem type
     * @type {string}
     * @memberof ModelError
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface Rent
 */
export interface Rent {
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'rentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'returnDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'returnExpectedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'book'?: string | null;
}
/**
 * 
 * @export
 * @interface RentJsonld
 */
export interface RentJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof RentJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'rentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'returnDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'returnExpectedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'book'?: string | null;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Account resources.
         * @summary Retrieves the collection of Account resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGetCollection: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Account resource.
         * @summary Creates a Account resource.
         * @param {AccountJsonld} accountJsonld The new Account resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPost: async (accountJsonld: AccountJsonld, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountJsonld' is not null or undefined
            assertParamExists('accountsPost', 'accountJsonld', accountJsonld)
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(accountJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Account resource.
         * @summary Removes the Account resource.
         * @param {string} username Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsernameDelete: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('accountsUsernameDelete', 'username', username)
            const localVarPath = `/api/accounts/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Account resource.
         * @summary Retrieves a Account resource.
         * @param {string} username Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsernameGet: async (username: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('accountsUsernameGet', 'username', username)
            const localVarPath = `/api/accounts/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Account resource.
         * @summary Updates the Account resource.
         * @param {string} username Account identifier
         * @param {Account} account The updated Account resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsernamePatch: async (username: string, account: Account, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('accountsUsernamePatch', 'username', username)
            // verify required parameter 'account' is not null or undefined
            assertParamExists('accountsUsernamePatch', 'account', account)
            const localVarPath = `/api/accounts/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Account resources.
         * @summary Retrieves the collection of Account resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsGetCollection(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiAccountsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsGetCollection(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountsGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Account resource.
         * @summary Creates a Account resource.
         * @param {AccountJsonld} accountJsonld The new Account resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsPost(accountJsonld: AccountJsonld, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPost(accountJsonld, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the Account resource.
         * @summary Removes the Account resource.
         * @param {string} username Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsernameDelete(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsernameDelete(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountsUsernameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a Account resource.
         * @summary Retrieves a Account resource.
         * @param {string} username Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsernameGet(username: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsernameGet(username, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountsUsernameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the Account resource.
         * @summary Updates the Account resource.
         * @param {string} username Account identifier
         * @param {Account} account The updated Account resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountsUsernamePatch(username: string, account: Account, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accountsUsernamePatch(username, account, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AccountApi.accountsUsernamePatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Account resources.
         * @summary Retrieves the collection of Account resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsGetCollection(page?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiAccountsGetCollection200Response> {
            return localVarFp.accountsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Account resource.
         * @summary Creates a Account resource.
         * @param {AccountJsonld} accountJsonld The new Account resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsPost(accountJsonld: AccountJsonld, options?: RawAxiosRequestConfig): AxiosPromise<AccountJsonld> {
            return localVarFp.accountsPost(accountJsonld, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Account resource.
         * @summary Removes the Account resource.
         * @param {string} username Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsernameDelete(username: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.accountsUsernameDelete(username, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Account resource.
         * @summary Retrieves a Account resource.
         * @param {string} username Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsernameGet(username: string, options?: RawAxiosRequestConfig): AxiosPromise<AccountJsonld> {
            return localVarFp.accountsUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Account resource.
         * @summary Updates the Account resource.
         * @param {string} username Account identifier
         * @param {Account} account The updated Account resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountsUsernamePatch(username: string, account: Account, options?: RawAxiosRequestConfig): AxiosPromise<AccountJsonld> {
            return localVarFp.accountsUsernamePatch(username, account, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * Retrieves the collection of Account resources.
     * @summary Retrieves the collection of Account resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsGetCollection(page?: number, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Account resource.
     * @summary Creates a Account resource.
     * @param {AccountJsonld} accountJsonld The new Account resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsPost(accountJsonld: AccountJsonld, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsPost(accountJsonld, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Account resource.
     * @summary Removes the Account resource.
     * @param {string} username Account identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsUsernameDelete(username: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsUsernameDelete(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Account resource.
     * @summary Retrieves a Account resource.
     * @param {string} username Account identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsUsernameGet(username: string, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Account resource.
     * @summary Updates the Account resource.
     * @param {string} username Account identifier
     * @param {Account} account The updated Account resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsUsernamePatch(username: string, account: Account, options?: RawAxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsUsernamePatch(username, account, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookApi - axios parameter creator
 * @export
 */
export const BookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGetCollection: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdDelete', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdGet', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
         * @param {string} id Book identifier
         * @param {Book} book The updated Book resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPatch: async (id: string, book: Book, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdPatch', 'id', id)
            // verify required parameter 'book' is not null or undefined
            assertParamExists('booksIdPatch', 'book', book)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(book, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
         * @param {BookJsonld} bookJsonld The new Book resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost: async (bookJsonld: BookJsonld, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookJsonld' is not null or undefined
            assertParamExists('booksPost', 'bookJsonld', bookJsonld)
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookApi - functional programming interface
 * @export
 */
export const BookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksGetCollection(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBooksGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksGetCollection(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
         * @param {string} id Book identifier
         * @param {Book} book The updated Book resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksIdPatch(id: string, book: Book, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdPatch(id, book, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
         * @param {BookJsonld} bookJsonld The new Book resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async booksPost(bookJsonld: BookJsonld, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.booksPost(bookJsonld, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BookApi.booksPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BookApi - factory interface
 * @export
 */
export const BookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BookApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksGetCollection(page?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiBooksGetCollection200Response> {
            return localVarFp.booksGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.booksIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<BookJsonld> {
            return localVarFp.booksIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
         * @param {string} id Book identifier
         * @param {Book} book The updated Book resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksIdPatch(id: string, book: Book, options?: RawAxiosRequestConfig): AxiosPromise<BookJsonld> {
            return localVarFp.booksIdPatch(id, book, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
         * @param {BookJsonld} bookJsonld The new Book resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        booksPost(bookJsonld: BookJsonld, options?: RawAxiosRequestConfig): AxiosPromise<BookJsonld> {
            return localVarFp.booksPost(bookJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BookApi - object-oriented interface
 * @export
 * @class BookApi
 * @extends {BaseAPI}
 */
export class BookApi extends BaseAPI {
    /**
     * Retrieves the collection of Book resources.
     * @summary Retrieves the collection of Book resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksGetCollection(page?: number, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Book resource.
     * @summary Removes the Book resource.
     * @param {string} id Book identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Book resource.
     * @summary Retrieves a Book resource.
     * @param {string} id Book identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdGet(id: string, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Book resource.
     * @summary Updates the Book resource.
     * @param {string} id Book identifier
     * @param {Book} book The updated Book resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdPatch(id: string, book: Book, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdPatch(id, book, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Book resource.
     * @summary Creates a Book resource.
     * @param {BookJsonld} bookJsonld The new Book resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksPost(bookJsonld: BookJsonld, options?: RawAxiosRequestConfig) {
        return BookApiFp(this.configuration).booksPost(bookJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommunicationApi - axios parameter creator
 * @export
 */
export const CommunicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves a Communication resource.
         * @summary Retrieves a Communication resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicKeyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/public_key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommunicationApi - functional programming interface
 * @export
 */
export const CommunicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommunicationApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves a Communication resource.
         * @summary Retrieves a Communication resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicKeyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationPublicKeyOutputJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publicKeyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommunicationApi.publicKeyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommunicationApi - factory interface
 * @export
 */
export const CommunicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommunicationApiFp(configuration)
    return {
        /**
         * Retrieves a Communication resource.
         * @summary Retrieves a Communication resource.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicKeyGet(options?: RawAxiosRequestConfig): AxiosPromise<CommunicationPublicKeyOutputJsonld> {
            return localVarFp.publicKeyGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommunicationApi - object-oriented interface
 * @export
 * @class CommunicationApi
 * @extends {BaseAPI}
 */
export class CommunicationApi extends BaseAPI {
    /**
     * Retrieves a Communication resource.
     * @summary Retrieves a Communication resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationApi
     */
    public publicKeyGet(options?: RawAxiosRequestConfig) {
        return CommunicationApiFp(this.configuration).publicKeyGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LogApi - axios parameter creator
 * @export
 */
export const LogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsGetCollection: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Log resource.
         * @summary Removes the Log resource.
         * @param {string} id Log identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logsIdDelete', 'id', id)
            const localVarPath = `/api/logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Log resource.
         * @summary Retrieves a Log resource.
         * @param {string} id Log identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logsIdGet', 'id', id)
            const localVarPath = `/api/logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Log resource.
         * @summary Updates the Log resource.
         * @param {string} id Log identifier
         * @param {Log} log The updated Log resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsIdPatch: async (id: string, log: Log, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('logsIdPatch', 'id', id)
            // verify required parameter 'log' is not null or undefined
            assertParamExists('logsIdPatch', 'log', log)
            const localVarPath = `/api/logs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(log, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Log resource.
         * @summary Creates a Log resource.
         * @param {LogJsonld} logJsonld The new Log resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsPost: async (logJsonld: LogJsonld, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'logJsonld' is not null or undefined
            assertParamExists('logsPost', 'logJsonld', logJsonld)
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(logJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsGetCollection(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiLogsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsGetCollection(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.logsGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the Log resource.
         * @summary Removes the Log resource.
         * @param {string} id Log identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.logsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a Log resource.
         * @summary Retrieves a Log resource.
         * @param {string} id Log identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.logsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the Log resource.
         * @summary Updates the Log resource.
         * @param {string} id Log identifier
         * @param {Log} log The updated Log resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsIdPatch(id: string, log: Log, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsIdPatch(id, log, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.logsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Log resource.
         * @summary Creates a Log resource.
         * @param {LogJsonld} logJsonld The new Log resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logsPost(logJsonld: LogJsonld, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logsPost(logJsonld, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LogApi.logsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LogApi - factory interface
 * @export
 */
export const LogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LogApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsGetCollection(page?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiLogsGetCollection200Response> {
            return localVarFp.logsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Log resource.
         * @summary Removes the Log resource.
         * @param {string} id Log identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.logsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Log resource.
         * @summary Retrieves a Log resource.
         * @param {string} id Log identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<LogJsonld> {
            return localVarFp.logsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Log resource.
         * @summary Updates the Log resource.
         * @param {string} id Log identifier
         * @param {Log} log The updated Log resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsIdPatch(id: string, log: Log, options?: RawAxiosRequestConfig): AxiosPromise<LogJsonld> {
            return localVarFp.logsIdPatch(id, log, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Log resource.
         * @summary Creates a Log resource.
         * @param {LogJsonld} logJsonld The new Log resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logsPost(logJsonld: LogJsonld, options?: RawAxiosRequestConfig): AxiosPromise<LogJsonld> {
            return localVarFp.logsPost(logJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export class LogApi extends BaseAPI {
    /**
     * Retrieves the collection of Log resources.
     * @summary Retrieves the collection of Log resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logsGetCollection(page?: number, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).logsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Log resource.
     * @summary Removes the Log resource.
     * @param {string} id Log identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).logsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Log resource.
     * @summary Retrieves a Log resource.
     * @param {string} id Log identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).logsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Log resource.
     * @summary Updates the Log resource.
     * @param {string} id Log identifier
     * @param {Log} log The updated Log resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logsIdPatch(id: string, log: Log, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).logsIdPatch(id, log, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Log resource.
     * @summary Creates a Log resource.
     * @param {LogJsonld} logJsonld The new Log resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logsPost(logJsonld: LogJsonld, options?: RawAxiosRequestConfig) {
        return LogApiFp(this.configuration).logsPost(logJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginCheckApi - axios parameter creator
 * @export
 */
export const LoginCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a user token.
         * @summary Creates a user token.
         * @param {LoginCheckPostRequest} loginCheckPostRequest The login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPost: async (loginCheckPostRequest: LoginCheckPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginCheckPostRequest' is not null or undefined
            assertParamExists('checkPost', 'loginCheckPostRequest', loginCheckPostRequest)
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginCheckPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginCheckApi - functional programming interface
 * @export
 */
export const LoginCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a user token.
         * @summary Creates a user token.
         * @param {LoginCheckPostRequest} loginCheckPostRequest The login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkPost(loginCheckPostRequest: LoginCheckPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginCheckPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkPost(loginCheckPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginCheckApi.checkPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginCheckApi - factory interface
 * @export
 */
export const LoginCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginCheckApiFp(configuration)
    return {
        /**
         * Creates a user token.
         * @summary Creates a user token.
         * @param {LoginCheckPostRequest} loginCheckPostRequest The login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkPost(loginCheckPostRequest: LoginCheckPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginCheckPost200Response> {
            return localVarFp.checkPost(loginCheckPostRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginCheckApi - object-oriented interface
 * @export
 * @class LoginCheckApi
 * @extends {BaseAPI}
 */
export class LoginCheckApi extends BaseAPI {
    /**
     * Creates a user token.
     * @summary Creates a user token.
     * @param {LoginCheckPostRequest} loginCheckPostRequest The login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginCheckApi
     */
    public checkPost(loginCheckPostRequest: LoginCheckPostRequest, options?: RawAxiosRequestConfig) {
        return LoginCheckApiFp(this.configuration).checkPost(loginCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RentApi - axios parameter creator
 * @export
 */
export const RentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsGetCollection: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdDelete', 'id', id)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdGet', 'id', id)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
         * @param {string} id Rent identifier
         * @param {Rent} rent The updated Rent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdPatch: async (id: string, rent: Rent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdPatch', 'id', id)
            // verify required parameter 'rent' is not null or undefined
            assertParamExists('rentsIdPatch', 'rent', rent)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/merge-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
         * @param {RentJsonld} rentJsonld The new Rent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsPost: async (rentJsonld: RentJsonld, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'rentJsonld' is not null or undefined
            assertParamExists('rentsPost', 'rentJsonld', rentJsonld)
            const localVarPath = `/api/rents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rentJsonld, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RentApi - functional programming interface
 * @export
 */
export const RentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RentApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsGetCollection(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiRentsGetCollection200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsGetCollection(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
         * @param {string} id Rent identifier
         * @param {Rent} rent The updated Rent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsIdPatch(id: string, rent: Rent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdPatch(id, rent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
         * @param {RentJsonld} rentJsonld The new Rent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsPost(rentJsonld: RentJsonld, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RentJsonld>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsPost(rentJsonld, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RentApi - factory interface
 * @export
 */
export const RentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RentApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsGetCollection(page?: number, options?: RawAxiosRequestConfig): AxiosPromise<ApiRentsGetCollection200Response> {
            return localVarFp.rentsGetCollection(page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rentsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<RentJsonld> {
            return localVarFp.rentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
         * @param {string} id Rent identifier
         * @param {Rent} rent The updated Rent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdPatch(id: string, rent: Rent, options?: RawAxiosRequestConfig): AxiosPromise<RentJsonld> {
            return localVarFp.rentsIdPatch(id, rent, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
         * @param {RentJsonld} rentJsonld The new Rent resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsPost(rentJsonld: RentJsonld, options?: RawAxiosRequestConfig): AxiosPromise<RentJsonld> {
            return localVarFp.rentsPost(rentJsonld, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RentApi - object-oriented interface
 * @export
 * @class RentApi
 * @extends {BaseAPI}
 */
export class RentApi extends BaseAPI {
    /**
     * Retrieves the collection of Rent resources.
     * @summary Retrieves the collection of Rent resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsGetCollection(page?: number, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Rent resource.
     * @summary Removes the Rent resource.
     * @param {string} id Rent identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Rent resource.
     * @summary Retrieves a Rent resource.
     * @param {string} id Rent identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdGet(id: string, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Rent resource.
     * @summary Updates the Rent resource.
     * @param {string} id Rent identifier
     * @param {Rent} rent The updated Rent resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdPatch(id: string, rent: Rent, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdPatch(id, rent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Rent resource.
     * @summary Creates a Rent resource.
     * @param {RentJsonld} rentJsonld The new Rent resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsPost(rentJsonld: RentJsonld, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsPost(rentJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}



