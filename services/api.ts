/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'ipAddress': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Account
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Account
     */
    'logs'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    'userIdentifier'?: string;
}
/**
 * 
 * @export
 * @interface AccountJsonld
 */
export interface AccountJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof AccountJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'ipAddress': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountJsonld
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AccountJsonld
     */
    'logs'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonld
     */
    'userIdentifier'?: string;
}
/**
 * @type AccountJsonldContext
 * @export
 */
export type AccountJsonldContext = AccountJsonldContextOneOf | string;

/**
 * 
 * @export
 * @interface AccountJsonldContextOneOf
 */
export interface AccountJsonldContextOneOf {
    [key: string]: any | any;

    /**
     * 
     * @type {string}
     * @memberof AccountJsonldContextOneOf
     */
    '@vocab': string;
    /**
     * 
     * @type {string}
     * @memberof AccountJsonldContextOneOf
     */
    'hydra': AccountJsonldContextOneOfHydraEnum;
}

export const AccountJsonldContextOneOfHydraEnum = {
    HttpWwwW3OrgNsHydraCore: 'http://www.w3.org/ns/hydra/core#'
} as const;

export type AccountJsonldContextOneOfHydraEnum = typeof AccountJsonldContextOneOfHydraEnum[keyof typeof AccountJsonldContextOneOfHydraEnum];

/**
 * 
 * @export
 * @interface Book
 */
export interface Book {
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof Book
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof Book
     */
    'stock': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Book
     */
    'rents'?: Array<string>;
}
/**
 * 
 * @export
 * @interface BookJsonld
 */
export interface BookJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof BookJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof BookJsonld
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof BookJsonld
     */
    'stock': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof BookJsonld
     */
    'rents'?: Array<string>;
}
/**
 * Exchange client and server\'s public key and generate symmetric key for encrypting messages.
 * @export
 * @interface CommunicationExchangeInputJsonld
 */
export interface CommunicationExchangeInputJsonld {
    /**
     * 
     * @type {string}
     * @memberof CommunicationExchangeInputJsonld
     */
    'publicKey'?: string;
}
/**
 * Exchange client and server\'s public key and generate symmetric key for encrypting messages.
 * @export
 * @interface CommunicationExchangeOutputJsonld
 */
export interface CommunicationExchangeOutputJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof CommunicationExchangeOutputJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof CommunicationExchangeOutputJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunicationExchangeOutputJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunicationExchangeOutputJsonld
     */
    'publicKey'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationExchangeOutputJsonld
     */
    'symmetricKey'?: string | null;
}
/**
 * Unprocessable entity
 * @export
 * @interface ConstraintViolationJson
 */
export interface ConstraintViolationJson {
    /**
     * 
     * @type {number}
     * @memberof ConstraintViolationJson
     */
    'status'?: number;
    /**
     * 
     * @type {Array<ConstraintViolationJsonViolationsInner>}
     * @memberof ConstraintViolationJson
     */
    'violations'?: Array<ConstraintViolationJsonViolationsInner>;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJson
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface ConstraintViolationJsonViolationsInner
 */
export interface ConstraintViolationJsonViolationsInner {
    /**
     * The property path of the violation
     * @type {string}
     * @memberof ConstraintViolationJsonViolationsInner
     */
    'propertyPath'?: string;
    /**
     * The message associated with the violation
     * @type {string}
     * @memberof ConstraintViolationJsonViolationsInner
     */
    'message'?: string;
}
/**
 * Unprocessable entity
 * @export
 * @interface ConstraintViolationJsonldJsonld
 */
export interface ConstraintViolationJsonldJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof ConstraintViolationJsonldJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {number}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'status'?: number;
    /**
     * 
     * @type {Array<ConstraintViolationJsonViolationsInner>}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'violations'?: Array<ConstraintViolationJsonViolationsInner>;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ConstraintViolationJsonldJsonld
     */
    'instance'?: string | null;
}
/**
 * A representation of common errors.
 * @export
 * @interface ErrorJsonld
 */
export interface ErrorJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof ErrorJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof ErrorJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorJsonld
     */
    '@type'?: string;
    /**
     * A short, human-readable summary of the problem.
     * @type {string}
     * @memberof ErrorJsonld
     */
    'title'?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ErrorJsonld
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ErrorJsonld
     */
    'status'?: number;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ErrorJsonld
     */
    'instance'?: string | null;
    /**
     * A URI reference that identifies the problem type
     * @type {string}
     * @memberof ErrorJsonld
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorJsonld
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface LogJsonld
 */
export interface LogJsonld {
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'account': string | null;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof LogJsonld
     */
    'type': string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof LogJsonld
     */
    'data'?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface LoginCheckPost200Response
 */
export interface LoginCheckPost200Response {
    /**
     * 
     * @type {string}
     * @memberof LoginCheckPost200Response
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface LoginCheckPostRequest
 */
export interface LoginCheckPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginCheckPostRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginCheckPostRequest
     */
    'password': string;
}
/**
 * A representation of common errors.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * A short, human-readable summary of the problem.
     * @type {string}
     * @memberof ModelError
     */
    'title'?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ModelError
     */
    'detail'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'status'?: number;
    /**
     * A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ModelError
     */
    'instance'?: string | null;
    /**
     * A URI reference that identifies the problem type
     * @type {string}
     * @memberof ModelError
     */
    'type'?: string;
}
/**
 * 
 * @export
 * @interface Rent
 */
export interface Rent {
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'rentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'returnDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'returnExpectedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof Rent
     */
    'book'?: string | null;
}
/**
 * 
 * @export
 * @interface RentJsonld
 */
export interface RentJsonld {
    /**
     * 
     * @type {AccountJsonldContext}
     * @memberof RentJsonld
     */
    '@context'?: AccountJsonldContext;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    '@id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    '@type'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'rentDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'returnDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'returnExpectedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'account'?: string;
    /**
     * 
     * @type {string}
     * @memberof RentJsonld
     */
    'book'?: string | null;
}

/**
 * AccountApi - axios parameter creator
 * @export
 */

export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Account resources.
         * @summary Retrieves the collection of Account resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            accountsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Account resource.
         * @summary Removes the Account resource.
         * @param {string} id Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            accountsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsIdDelete', 'id', id)
            const localVarPath = `/api/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Account resource.
         * @summary Retrieves a Account resource.
         * @param {string} id Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            accountsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('accountsIdGet', 'id', id)
            const localVarPath = `/api/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Account resource.
         * @summary Updates the Account resource.
        * @param {string} id
        * @param data any
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            accountsIdPatch: async (id: string, data?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('accountsIdPatch', 'id', id)
            assertParamExists('accountsIdPatch', 'data', data)
            const localVarPath = `/api/accounts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Account resource.
         * @summary Creates a Account resource.
        * @param {any} [data] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            accountsPost: async (data?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('accountsPost', 'data', data)
            const localVarPath = `/api/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Account resources.
         * @summary Retrieves the collection of Account resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async accountsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.accountsGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Account resource.
         * @summary Removes the Account resource.
         * @param {string} id Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async accountsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.accountsIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Account resource.
         * @summary Retrieves a Account resource.
         * @param {string} id Account identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async accountsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.accountsIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Account resource.
         * @summary Updates the Account resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async accountsIdPatch(id: string, data?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.accountsIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Account resource.
         * @summary Creates a Account resource.
                    * @param {any} [data] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async accountsPost(data?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.accountsPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
    /**
     * Retrieves the collection of Account resources.
     * @summary Retrieves the collection of Account resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Account resource.
     * @summary Removes the Account resource.
     * @param {string} id Account identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsIdDelete(id: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Account resource.
     * @summary Retrieves a Account resource.
     * @param {string} id Account identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsIdGet(id: string, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Account resource.
     * @summary Updates the Account resource.
     * @param {string} id Account identifier
     * @param {any} [body] Encrypted request payload (base64 encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsIdPatch(id: string, body?: any, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsIdPatch(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Account resource.
     * @summary Creates a Account resource.
     * @param {any} [body] Encrypted request payload (base64 encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    public accountsPost(body?: any, options?: AxiosRequestConfig) {
        return AccountApiFp(this.configuration).accountsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BookApi - axios parameter creator
 * @export
 */

export const BookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            booksGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            booksIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdDelete', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            booksIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('booksIdGet', 'id', id)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
        * @param {string} id
        * @param data any
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            booksIdPatch: async (id: string, data?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('booksIdPatch', 'id', id)
            assertParamExists('booksIdPatch', 'data', data)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces the Book resource.
         * @summary Replaces the Book resource.
        * @param {string} id
        * @param data any
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            booksIdPut: async (id: string, data?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('booksIdPut', 'id', id)
            assertParamExists('booksIdPut', 'data', data)
            const localVarPath = `/api/books/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
        * @param {any} [data] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            booksPost: async (data?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('booksPost', 'data', data)
            const localVarPath = `/api/books`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * BookApi - functional programming interface
 * @export
 */
export const BookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BookApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Book resources.
         * @summary Retrieves the collection of Book resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async booksGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.booksGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Book resource.
         * @summary Removes the Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async booksIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Book resource.
         * @summary Retrieves a Book resource.
         * @param {string} id Book identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async booksIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Book resource.
         * @summary Updates the Book resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async booksIdPatch(id: string, data?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces the Book resource.
         * @summary Replaces the Book resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async booksIdPut(id: string, data?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.booksIdPut(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Book resource.
         * @summary Creates a Book resource.
                    * @param {any} [data] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async booksPost(data?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.booksPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BookApi - object-oriented interface
 * @export
 * @class BookApi
 * @extends {BaseAPI}
 */
export class BookApi extends BaseAPI {
    /**
     * Retrieves the collection of Book resources.
     * @summary Retrieves the collection of Book resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksGetCollection(page?: number, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).booksGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Book resource.
     * @summary Removes the Book resource.
     * @param {string} id Book identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdDelete(id: string, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Book resource.
     * @summary Retrieves a Book resource.
     * @param {string} id Book identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdGet(id: string, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Book resource.
     * @summary Updates the Book resource.
     * @param {string} id Book identifier
     * @param {any} [body] Encrypted request payload (base64 encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdPatch(id: string, body?: any, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdPatch(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces the Book resource.
     * @summary Replaces the Book resource.
     * @param {string} id Book identifier
     * @param {any} [body] Encrypted request payload (base64 encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksIdPut(id: string, body?: any, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).booksIdPut(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Book resource.
     * @summary Creates a Book resource.
     * @param {any} [body] Encrypted request payload (base64 encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookApi
     */
    public booksPost(body?: any, options?: AxiosRequestConfig) {
        return BookApiFp(this.configuration).booksPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommunicationApi - axios parameter creator
 * @export
 */

export const CommunicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Communication resource.
         * @summary Creates a Communication resource.
        * @param {CommunicationExchangeInputJsonld} data The new Communication resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            exchangePost: async (data: CommunicationExchangeInputJsonld, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'communicationExchangeInputJsonld' is not null or undefined
            assertParamExists('exchangePost', 'data', data)
            const localVarPath = `/api/exchange`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * CommunicationApi - functional programming interface
 * @export
 */
export const CommunicationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommunicationApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a Communication resource.
         * @summary Creates a Communication resource.
                    * @param {CommunicationExchangeInputJsonld} data The new Communication resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async exchangePost(data: CommunicationExchangeInputJsonld, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationExchangeOutputJsonld>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.exchangePost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CommunicationApi - object-oriented interface
 * @export
 * @class CommunicationApi
 * @extends {BaseAPI}
 */
export class CommunicationApi extends BaseAPI {
    /**
     * Creates a Communication resource.
     * @summary Creates a Communication resource.
     * @param {CommunicationExchangeInputJsonld} communicationExchangeInputJsonld The new Communication resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationApi
     */
    public exchangePost(communicationExchangeInputJsonld: CommunicationExchangeInputJsonld, options?: AxiosRequestConfig) {
        return CommunicationApiFp(this.configuration).exchangePost(communicationExchangeInputJsonld, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LogApi - axios parameter creator
 * @export
 */

export const LogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {string} accountId Log identifier
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            accountsAccountIdlogsGetCollection: async (accountId: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('accountsAccountIdlogsGetCollection', 'accountId', accountId)
            const localVarPath = `/api/accounts/{account_id}/logs`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            logsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * LogApi - functional programming interface
 * @export
 */
export const LogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LogApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {string} accountId Log identifier
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async accountsAccountIdlogsGetCollection(accountId: string, page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.accountsAccountIdlogsGetCollection(accountId, page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves the collection of Log resources.
         * @summary Retrieves the collection of Log resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async logsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.logsGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LogApi - object-oriented interface
 * @export
 * @class LogApi
 * @extends {BaseAPI}
 */
export class LogApi extends BaseAPI {
    /**
     * Retrieves the collection of Log resources.
     * @summary Retrieves the collection of Log resources.
     * @param {string} accountId Log identifier
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public accountsAccountIdlogsGetCollection(accountId: string, page?: number, options?: AxiosRequestConfig) {
        return LogApiFp(this.configuration).accountsAccountIdlogsGetCollection(accountId, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the collection of Log resources.
     * @summary Retrieves the collection of Log resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LogApi
     */
    public logsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return LogApiFp(this.configuration).logsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginCheckApi - axios parameter creator
 * @export
 */

export const LoginCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a user token.
         * @summary Creates a user token.
        * @param {LoginCheckPostRequest} data The login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            checkPost: async (data: LoginCheckPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginCheckPostRequest' is not null or undefined
            assertParamExists('checkPost', 'data', data)
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * LoginCheckApi - functional programming interface
 * @export
 */
export const LoginCheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginCheckApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a user token.
         * @summary Creates a user token.
                    * @param {LoginCheckPostRequest} data The login data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async checkPost(data: LoginCheckPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginCheckPost200Response>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.checkPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginCheckApi - object-oriented interface
 * @export
 * @class LoginCheckApi
 * @extends {BaseAPI}
 */
export class LoginCheckApi extends BaseAPI {
    /**
     * Creates a user token.
     * @summary Creates a user token.
     * @param {LoginCheckPostRequest} loginCheckPostRequest The login data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginCheckApi
     */
    public checkPost(loginCheckPostRequest: LoginCheckPostRequest, options?: AxiosRequestConfig) {
        return LoginCheckApiFp(this.configuration).checkPost(loginCheckPostRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RentApi - axios parameter creator
 * @export
 */

export const RentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            rentsGetCollection: async (page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            rentsIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdDelete', 'id', id)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            rentsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdGet', 'id', id)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
        * @param {string} id
        * @param data any
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            rentsIdPatch: async (id: string, data?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rentsIdPatch', 'id', id)
            assertParamExists('rentsIdPatch', 'data', data)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
        * @param {any} [data] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
            rentsPost: async (data?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rentsPost', 'data', data)
            const localVarPath = `/api/rents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(data, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};


/**
 * RentApi - functional programming interface
 * @export
 */
export const RentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RentApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async rentsGetCollection(page?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.rentsGetCollection(page, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async rentsIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdDelete(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */


        async rentsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
                const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdGet(id, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
                    * @param {string} id
                    * @param data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async rentsIdPatch(id: string, data?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdPatch(id, data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
                    * @param {any} [data] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */

                async rentsPost(data?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {

                const localVarAxiosArgs = await localVarAxiosParamCreator.rentsPost(data, options);

            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RentApi - object-oriented interface
 * @export
 * @class RentApi
 * @extends {BaseAPI}
 */
export class RentApi extends BaseAPI {
    /**
     * Retrieves the collection of Rent resources.
     * @summary Retrieves the collection of Rent resources.
     * @param {number} [page] The collection page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsGetCollection(page?: number, options?: AxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsGetCollection(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Rent resource.
     * @summary Removes the Rent resource.
     * @param {string} id Rent identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdDelete(id: string, options?: AxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Rent resource.
     * @summary Retrieves a Rent resource.
     * @param {string} id Rent identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdGet(id: string, options?: AxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Rent resource.
     * @summary Updates the Rent resource.
     * @param {string} id Rent identifier
     * @param {any} [body] Encrypted request payload (base64 encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdPatch(id: string, body?: any, options?: AxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdPatch(id, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Rent resource.
     * @summary Creates a Rent resource.
     * @param {any} [body] Encrypted request payload (base64 encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsPost(body?: any, options?: AxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}



