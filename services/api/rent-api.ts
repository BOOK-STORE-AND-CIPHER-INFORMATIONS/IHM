/* tslint:disable */
/* eslint-disable */
/**
 * Hello API Platform
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * RentApi - axios parameter creator
 * @export
 */
export const RentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsGetCollection: async (page?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdDelete', 'id', id)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdGet', 'id', id)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
         * @param {string} id Rent identifier
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdPatch: async (id: string, body?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rentsIdPatch', 'id', id)
            const localVarPath = `/api/rents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsPost: async (body?: any, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/ld+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RentApi - functional programming interface
 * @export
 */
export const RentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RentApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {number} [page] The collection page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsGetCollection(page?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsGetCollection(page, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsGetCollection']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {string} id Rent identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
         * @param {string} id Rent identifier
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsIdPatch(id: string, body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsIdPatch(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
         * @param {any} [body] Encrypted request payload (base64 encoded)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rentsPost(body?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rentsPost(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RentApi.rentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RentApi - factory interface
 * @export
 */
export const RentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RentApiFp(configuration)
    return {
        /**
         * Retrieves the collection of Rent resources.
         * @summary Retrieves the collection of Rent resources.
         * @param {RentApiRentsGetCollectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsGetCollection(requestParameters: RentApiRentsGetCollectionRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rentsGetCollection(requestParameters.page, options).then((request) => request(axios, basePath));
        },
        /**
         * Removes the Rent resource.
         * @summary Removes the Rent resource.
         * @param {RentApiRentsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdDelete(requestParameters: RentApiRentsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rentsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a Rent resource.
         * @summary Retrieves a Rent resource.
         * @param {RentApiRentsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdGet(requestParameters: RentApiRentsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rentsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the Rent resource.
         * @summary Updates the Rent resource.
         * @param {RentApiRentsIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsIdPatch(requestParameters: RentApiRentsIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rentsIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Rent resource.
         * @summary Creates a Rent resource.
         * @param {RentApiRentsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rentsPost(requestParameters: RentApiRentsPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.rentsPost(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for rentsGetCollection operation in RentApi.
 * @export
 * @interface RentApiRentsGetCollectionRequest
 */
export interface RentApiRentsGetCollectionRequest {
    /**
     * The collection page number
     * @type {number}
     * @memberof RentApiRentsGetCollection
     */
    readonly page?: number
}

/**
 * Request parameters for rentsIdDelete operation in RentApi.
 * @export
 * @interface RentApiRentsIdDeleteRequest
 */
export interface RentApiRentsIdDeleteRequest {
    /**
     * Rent identifier
     * @type {string}
     * @memberof RentApiRentsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for rentsIdGet operation in RentApi.
 * @export
 * @interface RentApiRentsIdGetRequest
 */
export interface RentApiRentsIdGetRequest {
    /**
     * Rent identifier
     * @type {string}
     * @memberof RentApiRentsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for rentsIdPatch operation in RentApi.
 * @export
 * @interface RentApiRentsIdPatchRequest
 */
export interface RentApiRentsIdPatchRequest {
    /**
     * Rent identifier
     * @type {string}
     * @memberof RentApiRentsIdPatch
     */
    readonly id: string

    /**
     * Encrypted request payload (base64 encoded)
     * @type {any}
     * @memberof RentApiRentsIdPatch
     */
    readonly body?: any
}

/**
 * Request parameters for rentsPost operation in RentApi.
 * @export
 * @interface RentApiRentsPostRequest
 */
export interface RentApiRentsPostRequest {
    /**
     * Encrypted request payload (base64 encoded)
     * @type {any}
     * @memberof RentApiRentsPost
     */
    readonly body?: any
}

/**
 * RentApi - object-oriented interface
 * @export
 * @class RentApi
 * @extends {BaseAPI}
 */
export class RentApi extends BaseAPI {
    /**
     * Retrieves the collection of Rent resources.
     * @summary Retrieves the collection of Rent resources.
     * @param {RentApiRentsGetCollectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsGetCollection(requestParameters: RentApiRentsGetCollectionRequest = {}, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsGetCollection(requestParameters.page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Removes the Rent resource.
     * @summary Removes the Rent resource.
     * @param {RentApiRentsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdDelete(requestParameters: RentApiRentsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a Rent resource.
     * @summary Retrieves a Rent resource.
     * @param {RentApiRentsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdGet(requestParameters: RentApiRentsIdGetRequest, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the Rent resource.
     * @summary Updates the Rent resource.
     * @param {RentApiRentsIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsIdPatch(requestParameters: RentApiRentsIdPatchRequest, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsIdPatch(requestParameters.id, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Rent resource.
     * @summary Creates a Rent resource.
     * @param {RentApiRentsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentApi
     */
    public rentsPost(requestParameters: RentApiRentsPostRequest = {}, options?: RawAxiosRequestConfig) {
        return RentApiFp(this.configuration).rentsPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

